# 同源策略

* 跨域问题是源于浏览器的安全策略。为了保护数据的安全性和完整性，浏览器就使用了同源策略，以防止**恶意脚本**从当前源
获取其他源的重要数据。
* 需要注意的是：
  （1）跨域问题是出现在浏览器中，是浏览器自身的机制。对于其他非浏览器程序就没有这个限制。比如我们使用postman程序
  就不会存在跨域问题，使用nodejs程序访问接口也不存在同源策略，即不会产生跨域问题。
  （2）浏览器并不会限制当前源发送信息到其他源，而是会限制接收其他源的数据。
  
  
  正向代理的过程：
  用户(发送请求给代理服务器) -> 代理服务器（代理服务器将请求转发给网站服务器）  ->网站服务器（网站服务器接收到代理服务器的请求）
  ->代理服务器（代理服务器接收网站服务器返回的信息，并且将信息转发给用户）-> 用户
  在这个过程中，代理服务器是作为一个中间站，只做转发的工作，而目标服务器是由用户决定的。
  用途有：
    访问原来无法访问额的资源，例如google
    代理可以记录用户访问上网行为管理的记录，对外隐藏用户信息
  
  
  反向代理的过程：
    用户(发送请求给代理服务器) -> 代理服务器（代理服务器中进行设置将请求转发给网站服务器，需要在代理服务器上进行设置如proxy）  ->
    网站服务器（网站服务器接收到代理服务器的请求）->代理服务器（代理服务器接收网站服务器返回的信息，并且将信息转发给用户）-> 用户
  用途有：
    解决浏览器同源策略下的跨域问题。
    负载均衡，能够优化网站的负载。
  
  
  总结：
  （1）跨域问题源于浏览器的同源策略。
（2）同源策略要求协议、域名、端口号必须相同，限制脚本访问其他源的数据。
（3）Ajax 跨域访问有两种解决方案：反向代理和 CORS 。其中反向代理是在源服务器中配置，CORS 是在目标服务器中配置。

反向代理是通过代理服务器获取目标服务器的数据来绕过同源策略。
CORS 标准是通过开放目标服务器访问权限来提供数据。

  
